/* tslint:disable */
/* eslint-disable */
/**
 * Account Management Service API
 * Manage user subscriptions and clusters
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessReview } from '../model';
// @ts-ignore
import { AccessReviewResponse } from '../model';
// @ts-ignore
import { AccessTokenCfg } from '../model';
// @ts-ignore
import { Account } from '../model';
// @ts-ignore
import { AccountList } from '../model';
// @ts-ignore
import { AccountPatchRequest } from '../model';
// @ts-ignore
import { CapabilityReview } from '../model';
// @ts-ignore
import { CapabilityReviewRequest } from '../model';
// @ts-ignore
import { ClusterAuthorizationRequest } from '../model';
// @ts-ignore
import { ClusterAuthorizationResponse } from '../model';
// @ts-ignore
import { ClusterRegistrationRequest } from '../model';
// @ts-ignore
import { ClusterRegistrationResponse } from '../model';
// @ts-ignore
import { ErrorList } from '../model';
// @ts-ignore
import { ExportControlReview } from '../model';
// @ts-ignore
import { ExportControlReviewRequest } from '../model';
// @ts-ignore
import { FeatureReview } from '../model';
// @ts-ignore
import { FeatureReviewResponse } from '../model';
// @ts-ignore
import { FeatureToggle } from '../model';
// @ts-ignore
import { FeatureToggleQueryRequest } from '../model';
// @ts-ignore
import { Label } from '../model';
// @ts-ignore
import { LabelList } from '../model';
// @ts-ignore
import { MetricsList } from '../model';
// @ts-ignore
import { NotificationContactCreateRequest } from '../model';
// @ts-ignore
import { NotificationRequest } from '../model';
// @ts-ignore
import { Organization } from '../model';
// @ts-ignore
import { OrganizationList } from '../model';
// @ts-ignore
import { OrganizationPatchRequest } from '../model';
// @ts-ignore
import { Plan } from '../model';
// @ts-ignore
import { PlanList } from '../model';
// @ts-ignore
import { PullSecretRequest } from '../model';
// @ts-ignore
import { QuotaSummaryList } from '../model';
// @ts-ignore
import { Registry } from '../model';
// @ts-ignore
import { RegistryCredential } from '../model';
// @ts-ignore
import { RegistryCredentialList } from '../model';
// @ts-ignore
import { RegistryCredentialPatchRequest } from '../model';
// @ts-ignore
import { RegistryList } from '../model';
// @ts-ignore
import { ReservedResource } from '../model';
// @ts-ignore
import { ReservedResourceList } from '../model';
// @ts-ignore
import { ResourceQuota } from '../model';
// @ts-ignore
import { ResourceQuotaList } from '../model';
// @ts-ignore
import { ResourceQuotaRequest } from '../model';
// @ts-ignore
import { ResourceReview } from '../model';
// @ts-ignore
import { ResourceReviewRequest } from '../model';
// @ts-ignore
import { Role } from '../model';
// @ts-ignore
import { RoleBinding } from '../model';
// @ts-ignore
import { RoleBindingCreateRequest } from '../model';
// @ts-ignore
import { RoleBindingList } from '../model';
// @ts-ignore
import { RoleBindingRequest } from '../model';
// @ts-ignore
import { RoleList } from '../model';
// @ts-ignore
import { SKU } from '../model';
// @ts-ignore
import { SelfFeatureReview } from '../model';
// @ts-ignore
import { SelfResourceReview } from '../model';
// @ts-ignore
import { SelfResourceReviewRequest } from '../model';
// @ts-ignore
import { SelfTermsReview } from '../model';
// @ts-ignore
import { SkuList } from '../model';
// @ts-ignore
import { SkuRules } from '../model';
// @ts-ignore
import { SkuRulesList } from '../model';
// @ts-ignore
import { Subscription } from '../model';
// @ts-ignore
import { SubscriptionCreateRequest } from '../model';
// @ts-ignore
import { SubscriptionList } from '../model';
// @ts-ignore
import { SubscriptionPatchRequest } from '../model';
// @ts-ignore
import { Summary } from '../model';
// @ts-ignore
import { SupportCasesCreatedResponse } from '../model';
// @ts-ignore
import { SupportCasesRequest } from '../model';
// @ts-ignore
import { TermsReview } from '../model';
// @ts-ignore
import { TermsReviewResponse } from '../model';
// @ts-ignore
import { TokenAuthorizationRequest } from '../model';
// @ts-ignore
import { TokenAuthorizationResponse } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of accounts
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an account by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an account
         * @param {string} id The id of record
         * @param {AccountPatchRequest} accountPatchRequest Updated account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdPatch: async (id: string, accountPatchRequest: AccountPatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id)
            // verify required parameter 'accountPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new account
         * @param {Account} account Account data
         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsPost: async (account: Account, dryRun?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'account' is not null or undefined
            assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account)
            const localVarPath = `/api/accounts_mgmt/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (dryRun !== undefined) {
                localVarQueryParameter['dryRun'] = dryRun;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authorizes new cluster creation against an exsiting RH Subscription.
         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterAuthorizationsPost: async (clusterAuthorizationRequest: ClusterAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterAuthorizationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ClusterAuthorizationsPost', 'clusterAuthorizationRequest', clusterAuthorizationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clusterAuthorizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterRegistrationsPost: async (clusterRegistrationRequest: ClusterRegistrationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterRegistrationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ClusterRegistrationsPost', 'clusterRegistrationRequest', clusterRegistrationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clusterRegistrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of errors
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/errors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an error by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query a feature toggle by id
         * @param {string} id The id of record
         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id)
            // verify required parameter 'featureToggleQueryRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'featureToggleQueryRequest', featureToggleQueryRequest)
            const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureToggleQueryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1LabelsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/labels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of metrics
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Notify the owner of cluster/subscription
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1NotifyPost: async (notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/notify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of organizations
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an organization by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an organization
         * @param {string} id The id of record
         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdPatch: async (id: string, organizationPatchRequest: OrganizationPatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id)
            // verify required parameter 'organizationPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a summary of organizations clusters based on metrics
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a summary of resource quota
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (orgId: string, search?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new resource quota
         * @param {string} orgId The id of organization
         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId)
            // verify required parameter 'resourceQuotaRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'resourceQuotaRequest', resourceQuotaRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a resource quota by id
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId)
            // verify required parameter 'resourceQuotaRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'resourceQuotaRequest', resourceQuotaRequest)
            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new organization
         * @param {Organization} organization Organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization)
            const localVarPath = `/api/accounts_mgmt/v1/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all plans
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a plan by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a pull secret
         * @param {string} externalResourceId The external resource id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (externalResourceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'externalResourceId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1PullSecretsExternalResourceIdDelete', 'externalResourceId', externalResourceId)
            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`
                .replace(`{${"externalResourceId"}}`, encodeURIComponent(String(externalResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsPost: async (pullSecretRequest: PullSecretRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pullSecretRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest)
            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of registries
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/registries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an registry by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Registry Credentials
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a registry credential by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a registry credentials by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a registry credential
         * @param {string} id The id of record
         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdPatch: async (id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id)
            // verify required parameter 'registryCredentialPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'registryCredentialPatchRequest', registryCredentialPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryCredentialPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request the creation of a registry credential
         * @param {RegistryCredential} registryCredential Registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsPost: async (registryCredential: RegistryCredential, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryCredential' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential)
            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ReservedResourcesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ResourceQuotaGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of role bindings
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role binding
         * @param {string} id The id of record
         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdPatch: async (id: string, roleBindingRequest: RoleBindingRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id)
            // verify required parameter 'roleBindingRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new role binding
         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsPost: async (roleBindingCreateRequest: RoleBindingCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleBindingCreateRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest)
            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of roles
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of UHC product SKU Rules
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sku rules by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of UHC product SKUs
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/skus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sku by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsGet: async (page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (fetchAccounts !== undefined) {
                localVarQueryParameter['fetchAccounts'] = fetchAccounts;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a subscription by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a subscription by id
         * @param {string} id The id of record
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdGet: async (id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fetchAccounts !== undefined) {
                localVarQueryParameter['fetchAccounts'] = fetchAccounts;
            }

            if (fetchLabels !== undefined) {
                localVarQueryParameter['fetchLabels'] = fetchLabels;
            }

            if (fetchCapabilities !== undefined) {
                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;
            }

            if (fetchCpuAndSocket !== undefined) {
                localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id)
            // verify required parameter 'label' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Notify the owner of a subscription
         * @param {string} id The id of record
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (id: string, notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id)
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} id The id of record
         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdPatch: async (id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id)
            // verify required parameter 'subscriptionPatchRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (id: string, page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new subscription
         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsPost: async (subscriptionCreateRequest: SubscriptionCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionCreateRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a notification contact by subscription and account id
         * @param {string} subId The id of subscription
         * @param {string} accountId The id of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (subId: string, accountId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'accountId', accountId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of notification contacts for the given subscription
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add an account as a notification contact to this subscription
         * @param {string} subId The id of subscription
         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId)
            // verify required parameter 'notificationContactCreateRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'notificationContactCreateRequest', notificationContactCreateRequest)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationContactCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (subId: string, reservedResourceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'subId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId)
            // verify required parameter 'reservedResourceId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'reservedResourceId', reservedResourceId)
            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`
                .replace(`{${"subId"}}`, encodeURIComponent(String(subId)))
                .replace(`{${"reservedResourceId"}}`, encodeURIComponent(String(reservedResourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a support case
         * @param {string} caseId The id of a support case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId)
            const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create a support case for the subscription
         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesPost: async (supportCasesRequest: SupportCasesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'supportCasesRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest)
            const localVarPath = `/api/accounts_mgmt/v1/support_cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finds the account owner of the provided token
         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1TokenAuthorizationPost: async (tokenAuthorizationRequest: TokenAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenAuthorizationRequest' is not null or undefined
            assertParamExists('apiAccountsMgmtV1TokenAuthorizationPost', 'tokenAuthorizationRequest', tokenAuthorizationRequest)
            const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenAuthorizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review an account\'s access to perform an action on a particular resource or resource type
         * @param {AccessReview} accessReview Access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1AccessReviewPost: async (accessReview: AccessReview, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview)
            const localVarPath = `/api/authorizations/v1/access_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review an account\'s capabilities
         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1CapabilityReviewPost: async (capabilityReviewRequest: CapabilityReviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'capabilityReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest)
            const localVarPath = `/api/authorizations/v1/capability_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(capabilityReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ExportControlReviewPost: async (exportControlReviewRequest: ExportControlReviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportControlReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1ExportControlReviewPost', 'exportControlReviewRequest', exportControlReviewRequest)
            const localVarPath = `/api/authorizations/v1/export_control_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportControlReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review feature to perform an action on it such as toggle a feature on/off
         * @param {FeatureReview} featureReview Feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1FeatureReviewPost: async (featureReview: FeatureReview, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'featureReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1FeatureReviewPost', 'featureReview', featureReview)
            const localVarPath = `/api/authorizations/v1/feature_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featureReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ResourceReviewPost: async (resourceReviewRequest: ResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest)
            const localVarPath = `/api/authorizations/v1/resource_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review your ability to toggle a feature
         * @param {SelfFeatureReview} selfFeatureReview Self feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfFeatureReviewPost: async (selfFeatureReview: SelfFeatureReview, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfFeatureReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1SelfFeatureReviewPost', 'selfFeatureReview', selfFeatureReview)
            const localVarPath = `/api/authorizations/v1/self_feature_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selfFeatureReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfResourceReviewPost: async (selfResourceReviewRequest: SelfResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfResourceReviewRequest' is not null or undefined
            assertParamExists('apiAuthorizationsV1SelfResourceReviewPost', 'selfResourceReviewRequest', selfResourceReviewRequest)
            const localVarPath = `/api/authorizations/v1/self_resource_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selfResourceReviewRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfTermsReviewPost: async (selfTermsReview: SelfTermsReview, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfTermsReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview)
            const localVarPath = `/api/authorizations/v1/self_terms_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Review an account\'s status of Terms
         * @param {TermsReview} termsReview Data to check terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'termsReview' is not null or undefined
            assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview)
            const localVarPath = `/api/authorizations/v1/terms_review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a list of accounts
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an account by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an account
         * @param {string} id The id of record
         * @param {AccountPatchRequest} accountPatchRequest Updated account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new account
         * @param {Account} account Account data
         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Authorizes new cluster creation against an exsiting RH Subscription.
         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of errors
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an error by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query a feature toggle by id
         * @param {string} id The id of record
         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of metrics
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1MetricsGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Notify the owner of cluster/subscription
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(notificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of organizations
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an organization by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an organization
         * @param {string} id The id of record
         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a summary of organizations clusters based on metrics
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a summary of resource quota
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new resource quota
         * @param {string} orgId The id of organization
         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a resource quota by id
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new organization
         * @param {Organization} organization Organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(organization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all plans
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a plan by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PlansIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a pull secret
         * @param {string} externalResourceId The external resource id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of registries
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an registry by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List Registry Credentials
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a registry credential by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a registry credentials by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a registry credential
         * @param {string} id The id of record
         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request the creation of a registry credential
         * @param {RegistryCredential} registryCredential Registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of role bindings
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a role binding
         * @param {string} id The id of record
         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new role binding
         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of roles
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1RolesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of UHC product SKU Rules
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a sku rules by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of UHC product SKUs
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkusGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a sku by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SkusIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a subscription by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a subscription by id
         * @param {string} id The id of record
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Notify the owner of a subscription
         * @param {string} id The id of record
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} id The id of record
         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new subscription
         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a notification contact by subscription and account id
         * @param {string} subId The id of subscription
         * @param {string} accountId The id of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of notification contacts for the given subscription
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add an account as a notification contact to this subscription
         * @param {string} subId The id of subscription
         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a support case
         * @param {string} caseId The id of a support case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create a support case for the subscription
         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finds the account owner of the provided token
         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review an account\'s access to perform an action on a particular resource or resource type
         * @param {AccessReview} accessReview Access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(accessReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review an account\'s capabilities
         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review feature to perform an action on it such as toggle a feature on/off
         * @param {FeatureReview} featureReview Feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1FeatureReviewPost(featureReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review your ability to toggle a feature
         * @param {SelfFeatureReview} selfFeatureReview Self feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Review an account\'s status of Terms
         * @param {TermsReview} termsReview Data to check terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(termsReview, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a list of accounts
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList> {
            return localVarFp.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an account by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an account
         * @param {string} id The id of record
         * @param {AccountPatchRequest} accountPatchRequest Updated account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new account
         * @param {Account} account Account data
         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Authorizes new cluster creation against an exsiting RH Subscription.
         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse> {
            return localVarFp.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse> {
            return localVarFp.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of errors
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {
            return localVarFp.apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an error by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {
            return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query a feature toggle by id
         * @param {string} id The id of record
         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle> {
            return localVarFp.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of metrics
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {
            return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Notify the owner of cluster/subscription
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of organizations
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an organization by id
         * @param {string} id The id of record
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an organization
         * @param {string} id The id of record
         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a summary of organizations clusters based on metrics
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {
            return localVarFp.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a summary of resource quota
         * @param {string} orgId The id of organization
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {string} orgId The id of organization
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new resource quota
         * @param {string} orgId The id of organization
         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a resource quota by id
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a resource quota
         * @param {string} orgId The id of organization
         * @param {string} quotaId The id of quota
         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {
            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new organization
         * @param {Organization} organization Organization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {
            return localVarFp.apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all plans
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {
            return localVarFp.apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a plan by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {
            return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a pull secret
         * @param {string} externalResourceId The external resource id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return access token generated from registries in docker format
         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg> {
            return localVarFp.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of registries
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList> {
            return localVarFp.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an registry by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {
            return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Registry Credentials
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a registry credential by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a registry credentials by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a registry credential
         * @param {string} id The id of record
         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request the creation of a registry credential
         * @param {RegistryCredential} registryCredential Registry credential data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential> {
            return localVarFp.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {
            return localVarFp.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of resource quota objects
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {
            return localVarFp.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of role bindings
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role binding
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role binding
         * @param {string} id The id of record
         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new role binding
         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding> {
            return localVarFp.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of roles
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {
            return localVarFp.apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {
            return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of UHC product SKU Rules
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {
            return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a sku rules by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {
            return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of UHC product SKUs
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {
            return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a sku by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {
            return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of subscriptions
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a subscription by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a subscription by id
         * @param {string} id The id of record
         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of labels
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get subscription labels by label key
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {string} key The key of the label
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new label or update an existing label
         * @param {string} id The id of record
         * @param {Label} label Label data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Notify the owner of a subscription
         * @param {string} id The id of record
         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a subscription
         * @param {string} id The id of record
         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of reserved resources
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
         * @param {string} id The id of record
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new subscription
         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a notification contact by subscription and account id
         * @param {string} subId The id of subscription
         * @param {string} accountId The id of account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of notification contacts for the given subscription
         * @param {string} subId The id of subscription
         * @param {number} [page] Page number of record list when record list exceeds specified page size
         * @param {number} [size] Maximum number of records to return
         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add an account as a notification contact to this subscription
         * @param {string} subId The id of subscription
         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reserved resources by id
         * @param {string} subId The id of subscription
         * @param {string} reservedResourceId The id of reserved resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource> {
            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a support case
         * @param {string} caseId The id of a support case
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create a support case for the subscription
         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse> {
            return localVarFp.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finds the account owner of the provided token
         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse> {
            return localVarFp.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review an account\'s access to perform an action on a particular resource or resource type
         * @param {AccessReview} accessReview Access review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {
            return localVarFp.apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review an account\'s capabilities
         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview> {
            return localVarFp.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview> {
            return localVarFp.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review feature to perform an action on it such as toggle a feature on/off
         * @param {FeatureReview} featureReview Feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {
            return localVarFp.apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview> {
            return localVarFp.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review your ability to toggle a feature
         * @param {SelfFeatureReview} selfFeatureReview Self feature review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {
            return localVarFp.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview> {
            return localVarFp.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review your status of Terms
         * @param {SelfTermsReview} selfTermsReview Data to check self terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse> {
            return localVarFp.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Review an account\'s status of Terms
         * @param {TermsReview} termsReview Data to check terms for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {
            return localVarFp.apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Returns a list of accounts
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList>;

    /**
     * 
     * @summary Get an account by id
     * @param {string} id The id of record
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account>;

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Update an account
     * @param {string} id The id of record
     * @param {AccountPatchRequest} accountPatchRequest Updated account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account>;

    /**
     * 
     * @summary Create a new account
     * @param {Account} account Account data
     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;

    /**
     * 
     * @summary Authorizes new cluster creation against an exsiting RH Subscription.
     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse>;

    /**
     * 
     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse>;

    /**
     * 
     * @summary Returns a list of errors
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;

    /**
     * 
     * @summary Get an error by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;

    /**
     * 
     * @summary Query a feature toggle by id
     * @param {string} id The id of record
     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle>;

    /**
     * 
     * @summary Returns a list of labels
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;

    /**
     * 
     * @summary Returns a list of metrics
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;

    /**
     * 
     * @summary Notify the owner of cluster/subscription
     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Returns a list of organizations
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList>;

    /**
     * 
     * @summary Get an organization by id
     * @param {string} id The id of record
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization>;

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Update an organization
     * @param {string} id The id of record
     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization>;

    /**
     * 
     * @summary Returns a summary of organizations clusters based on metrics
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;

    /**
     * 
     * @summary Returns a summary of resource quota
     * @param {string} orgId The id of organization
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList>;

    /**
     * 
     * @summary Returns a list of resource quota objects
     * @param {string} orgId The id of organization
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;

    /**
     * 
     * @summary Create a new resource quota
     * @param {string} orgId The id of organization
     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;

    /**
     * 
     * @summary Delete a resource quota
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get a resource quota by id
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota>;

    /**
     * 
     * @summary Update a resource quota
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;

    /**
     * 
     * @summary Create a new organization
     * @param {Organization} organization Organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;

    /**
     * 
     * @summary Get all plans
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;

    /**
     * 
     * @summary Get a plan by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;

    /**
     * 
     * @summary Delete a pull secret
     * @param {string} externalResourceId The external resource id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Return access token generated from registries in docker format
     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;

    /**
     * 
     * @summary Returns a list of registries
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList>;

    /**
     * 
     * @summary Get an registry by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;

    /**
     * List Registry Credentials
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList>;

    /**
     * 
     * @summary Delete a registry credential by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get a registry credentials by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;

    /**
     * 
     * @summary Update a registry credential
     * @param {string} id The id of record
     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential>;

    /**
     * 
     * @summary Request the creation of a registry credential
     * @param {RegistryCredential} registryCredential Registry credential data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential>;

    /**
     * 
     * @summary Returns a list of reserved resources
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;

    /**
     * 
     * @summary Returns a list of resource quota objects
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;

    /**
     * 
     * @summary Returns a list of role bindings
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList>;

    /**
     * 
     * @summary Delete a role binding
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get a role binding
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;

    /**
     * 
     * @summary Update a role binding
     * @param {string} id The id of record
     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding>;

    /**
     * 
     * @summary Create a new role binding
     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding>;

    /**
     * 
     * @summary Returns a list of roles
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;

    /**
     * 
     * @summary Get a role by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;

    /**
     * 
     * @summary Returns a list of UHC product SKU Rules
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;

    /**
     * 
     * @summary Get a sku rules by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;

    /**
     * 
     * @summary Returns a list of UHC product SKUs
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;

    /**
     * 
     * @summary Get a sku by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;

    /**
     * 
     * @summary Returns a list of subscriptions
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList>;

    /**
     * 
     * @summary Deletes a subscription by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get a subscription by id
     * @param {string} id The id of record
     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription>;

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;

    /**
     * 
     * @summary Notify the owner of a subscription
     * @param {string} id The id of record
     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Update a subscription
     * @param {string} id The id of record
     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription>;

    /**
     * 
     * @summary Returns a list of reserved resources
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;

    /**
     * 
     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Create a new subscription
     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription>;

    /**
     * 
     * @summary Deletes a notification contact by subscription and account id
     * @param {string} subId The id of subscription
     * @param {string} accountId The id of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Returns a list of notification contacts for the given subscription
     * @param {string} subId The id of subscription
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList>;

    /**
     * 
     * @summary Add an account as a notification contact to this subscription
     * @param {string} subId The id of subscription
     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account>;

    /**
     * 
     * @summary Get reserved resources by id
     * @param {string} subId The id of subscription
     * @param {string} reservedResourceId The id of reserved resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource>;

    /**
     * 
     * @summary Delete a support case
     * @param {string} caseId The id of a support case
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary create a support case for the subscription
     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse>;

    /**
     * 
     * @summary Finds the account owner of the provided token
     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse>;

    /**
     * 
     * @summary Review an account\'s access to perform an action on a particular resource or resource type
     * @param {AccessReview} accessReview Access review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;

    /**
     * 
     * @summary Review an account\'s capabilities
     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview>;

    /**
     * 
     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview>;

    /**
     * 
     * @summary Review feature to perform an action on it such as toggle a feature on/off
     * @param {FeatureReview} featureReview Feature review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): AxiosPromise<FeatureReviewResponse>;

    /**
     * 
     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview>;

    /**
     * 
     * @summary Review your ability to toggle a feature
     * @param {SelfFeatureReview} selfFeatureReview Self feature review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): AxiosPromise<FeatureReviewResponse>;

    /**
     * 
     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview>;

    /**
     * 
     * @summary Review your status of Terms
     * @param {SelfTermsReview} selfTermsReview Data to check self terms for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse>;

    /**
     * 
     * @summary Review an account\'s status of Terms
     * @param {TermsReview} termsReview Data to check terms for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Returns a list of accounts
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an account by id
     * @param {string} id The id of record
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an account
     * @param {string} id The id of record
     * @param {AccountPatchRequest} accountPatchRequest Updated account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new account
     * @param {Account} account Account data
     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Authorizes new cluster creation against an exsiting RH Subscription.
     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID
     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of errors
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an error by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query a feature toggle by id
     * @param {string} id The id of record
     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of metrics
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Notify the owner of cluster/subscription
     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of organizations
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an organization by id
     * @param {string} id The id of record
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an organization
     * @param {string} id The id of record
     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a summary of organizations clusters based on metrics
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a summary of resource quota
     * @param {string} orgId The id of organization
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of resource quota objects
     * @param {string} orgId The id of organization
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new resource quota
     * @param {string} orgId The id of organization
     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a resource quota
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a resource quota by id
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a resource quota
     * @param {string} orgId The id of organization
     * @param {string} quotaId The id of quota
     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new organization
     * @param {Organization} organization Organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all plans
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a plan by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a pull secret
     * @param {string} externalResourceId The external resource id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return access token generated from registries in docker format
     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of registries
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an registry by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Registry Credentials
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a registry credential by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a registry credentials by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a registry credential
     * @param {string} id The id of record
     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request the creation of a registry credential
     * @param {RegistryCredential} registryCredential Registry credential data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of reserved resources
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of resource quota objects
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of role bindings
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role binding
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role binding
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role binding
     * @param {string} id The id of record
     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new role binding
     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of roles
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of UHC product SKU Rules
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a sku rules by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of UHC product SKUs
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusGet(search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a sku by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of subscriptions
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \&quot;foo&#x3D;bar,fooz&#x3D;barz\&quot; &#x60;&#x60;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a subscription by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a subscription by id
     * @param {string} id The id of record
     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.
     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.
     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.
     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of labels
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get subscription labels by label key
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {string} key The key of the label
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new label or update an existing label
     * @param {string} id The id of record
     * @param {Label} label Label data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Notify the owner of a subscription
     * @param {string} id The id of record
     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a subscription
     * @param {string} id The id of record
     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of reserved resources
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption
     * @param {string} id The id of record
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new subscription
     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a notification contact by subscription and account id
     * @param {string} subId The id of subscription
     * @param {string} accountId The id of account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of notification contacts for the given subscription
     * @param {string} subId The id of subscription
     * @param {number} [page] Page number of record list when record list exceeds specified page size
     * @param {number} [size] Maximum number of records to return
     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \&#39;my%\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \&#39;foo\&#39; and labels.value &#x3D; \&#39;bar\&#39; &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.
     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add an account as a notification contact to this subscription
     * @param {string} subId The id of subscription
     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\&#39;s username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reserved resources by id
     * @param {string} subId The id of subscription
     * @param {string} reservedResourceId The id of reserved resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a support case
     * @param {string} caseId The id of a support case
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create a support case for the subscription
     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finds the account owner of the provided token
     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review an account\'s access to perform an action on a particular resource or resource type
     * @param {AccessReview} accessReview Access review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review an account\'s capabilities
     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. 
     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review feature to perform an action on it such as toggle a feature on/off
     * @param {FeatureReview} featureReview Feature review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review your ability to toggle a feature
     * @param {SelfFeatureReview} selfFeatureReview Self feature review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\"*\"] is shorthand for all ids.
     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review your status of Terms
     * @param {SelfTermsReview} selfTermsReview Data to check self terms for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Review an account\'s status of Terms
     * @param {TermsReview} termsReview Data to check terms for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(this.axios, this.basePath));
    }
}
