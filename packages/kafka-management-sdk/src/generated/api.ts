/* tslint:disable */
/* eslint-disable */
/**
 * Kafka Service Fleet Manager
 * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Cloud provider.
 * @export
 * @interface CloudProvider
 */
export interface CloudProvider {
    /**
     * Indicates the type of this object. Will be \'CloudProvider\' link.
     * @type {string}
     * @memberof CloudProvider
     */
    kind?: string;
    /**
     * Unique identifier of the object.
     * @type {string}
     * @memberof CloudProvider
     */
    id?: string;
    /**
     * Name of the cloud provider for display purposes.
     * @type {string}
     * @memberof CloudProvider
     */
    display_name?: string;
    /**
     * Human friendly identifier of the cloud provider, for example `aws`.
     * @type {string}
     * @memberof CloudProvider
     */
    name?: string;
    /**
     * Whether the cloud provider is enabled for deploying an OSD cluster.
     * @type {boolean}
     * @memberof CloudProvider
     */
    enabled: boolean;
}
/**
 * 
 * @export
 * @interface CloudProviderList
 */
export interface CloudProviderList {
    /**
     * 
     * @type {string}
     * @memberof CloudProviderList
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof CloudProviderList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof CloudProviderList
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof CloudProviderList
     */
    total: number;
    /**
     * 
     * @type {Array<CloudProvider>}
     * @memberof CloudProviderList
     */
    items: Array<CloudProvider>;
}
/**
 * 
 * @export
 * @interface CloudProviderListAllOf
 */
export interface CloudProviderListAllOf {
    /**
     * 
     * @type {Array<CloudProvider>}
     * @memberof CloudProviderListAllOf
     */
    items?: Array<CloudProvider>;
}
/**
 * Description of a region of a cloud provider.
 * @export
 * @interface CloudRegion
 */
export interface CloudRegion {
    /**
     * Indicates the type of this object. Will be \'CloudRegion\'.
     * @type {string}
     * @memberof CloudRegion
     */
    kind?: string;
    /**
     * Unique identifier of the object.
     * @type {string}
     * @memberof CloudRegion
     */
    id?: string;
    /**
     * Name of the region for display purposes, for example `N. Virginia`.
     * @type {string}
     * @memberof CloudRegion
     */
    display_name?: string;
    /**
     * Whether the region is enabled for deploying an OSD cluster.
     * @type {boolean}
     * @memberof CloudRegion
     */
    enabled: boolean;
}
/**
 * 
 * @export
 * @interface CloudRegionList
 */
export interface CloudRegionList {
    /**
     * 
     * @type {string}
     * @memberof CloudRegionList
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof CloudRegionList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof CloudRegionList
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof CloudRegionList
     */
    total: number;
    /**
     * 
     * @type {Array<CloudRegion>}
     * @memberof CloudRegionList
     */
    items: Array<CloudRegion>;
}
/**
 * 
 * @export
 * @interface CloudRegionListAllOf
 */
export interface CloudRegionListAllOf {
    /**
     * 
     * @type {Array<CloudRegion>}
     * @memberof CloudRegionListAllOf
     */
    items?: Array<CloudRegion>;
}
/**
 * 
 * @export
 * @interface ErrorAllOf
 */
export interface ErrorAllOf {
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorAllOf
     */
    operation_id?: string;
}
/**
 * 
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * 
     * @type {string}
     * @memberof ErrorList
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof ErrorList
     */
    total: number;
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    items: Array<Error>;
}
/**
 * 
 * @export
 * @interface ErrorListAllOf
 */
export interface ErrorListAllOf {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorListAllOf
     */
    items?: Array<Error>;
}
/**
 * 
 * @export
 * @interface InstantQuery
 */
export interface InstantQuery {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof InstantQuery
     */
    metric?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof InstantQuery
     */
    Timestamp?: number;
    /**
     * 
     * @type {number}
     * @memberof InstantQuery
     */
    Value: number;
}
/**
 * 
 * @export
 * @interface KafkaRequest
 */
export interface KafkaRequest {
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    cloud_provider?: string;
    /**
     * 
     * @type {boolean}
     * @memberof KafkaRequest
     */
    multi_az?: boolean;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    bootstrapServerHost?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    updated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    failed_reason?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequest
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface KafkaRequestAllOf
 */
export interface KafkaRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    cloud_provider?: string;
    /**
     * 
     * @type {boolean}
     * @memberof KafkaRequestAllOf
     */
    multi_az?: boolean;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    bootstrapServerHost?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    updated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    failed_reason?: string;
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestAllOf
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface KafkaRequestList
 */
export interface KafkaRequestList {
    /**
     * 
     * @type {string}
     * @memberof KafkaRequestList
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof KafkaRequestList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof KafkaRequestList
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof KafkaRequestList
     */
    total: number;
    /**
     * 
     * @type {Array<KafkaRequest>}
     * @memberof KafkaRequestList
     */
    items: Array<KafkaRequest>;
}
/**
 * 
 * @export
 * @interface KafkaRequestListAllOf
 */
export interface KafkaRequestListAllOf {
    /**
     * 
     * @type {Array<KafkaRequest>}
     * @memberof KafkaRequestListAllOf
     */
    items?: Array<KafkaRequest>;
}
/**
 * Schema for the request body sent to /kafkas POST
 * @export
 * @interface KafkaRequestPayload
 */
export interface KafkaRequestPayload {
    /**
     * The cloud provider where the Kafka cluster will be created in
     * @type {string}
     * @memberof KafkaRequestPayload
     */
    cloud_provider?: string;
    /**
     * Set this to true to configure the Kafka cluster to be multiAZ
     * @type {boolean}
     * @memberof KafkaRequestPayload
     */
    multi_az?: boolean;
    /**
     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \'-\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.
     * @type {string}
     * @memberof KafkaRequestPayload
     */
    name: string;
    /**
     * The region where the Kafka cluster will be created in
     * @type {string}
     * @memberof KafkaRequestPayload
     */
    region?: string;
}
/**
 * 
 * @export
 * @interface List
 */
export interface List {
    /**
     * 
     * @type {string}
     * @memberof List
     */
    kind: string;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof List
     */
    total: number;
}
/**
 * 
 * @export
 * @interface MetricsInstantQueryList
 */
export interface MetricsInstantQueryList {
    /**
     * 
     * @type {string}
     * @memberof MetricsInstantQueryList
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricsInstantQueryList
     */
    id?: string;
    /**
     * 
     * @type {Array<InstantQuery>}
     * @memberof MetricsInstantQueryList
     */
    items?: Array<InstantQuery>;
}
/**
 * 
 * @export
 * @interface MetricsInstantQueryListAllOf
 */
export interface MetricsInstantQueryListAllOf {
    /**
     * 
     * @type {string}
     * @memberof MetricsInstantQueryListAllOf
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricsInstantQueryListAllOf
     */
    id?: string;
    /**
     * 
     * @type {Array<InstantQuery>}
     * @memberof MetricsInstantQueryListAllOf
     */
    items?: Array<InstantQuery>;
}
/**
 * 
 * @export
 * @interface MetricsRangeQueryList
 */
export interface MetricsRangeQueryList {
    /**
     * 
     * @type {string}
     * @memberof MetricsRangeQueryList
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricsRangeQueryList
     */
    id?: string;
    /**
     * 
     * @type {Array<RangeQuery>}
     * @memberof MetricsRangeQueryList
     */
    items?: Array<RangeQuery>;
}
/**
 * 
 * @export
 * @interface MetricsRangeQueryListAllOf
 */
export interface MetricsRangeQueryListAllOf {
    /**
     * 
     * @type {string}
     * @memberof MetricsRangeQueryListAllOf
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof MetricsRangeQueryListAllOf
     */
    id?: string;
    /**
     * 
     * @type {Array<RangeQuery>}
     * @memberof MetricsRangeQueryListAllOf
     */
    items?: Array<RangeQuery>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    reason?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    operation_id?: string;
}
/**
 * 
 * @export
 * @interface ObjectReference
 */
export interface ObjectReference {
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof ObjectReference
     */
    href?: string;
}
/**
 * 
 * @export
 * @interface RangeQuery
 */
export interface RangeQuery {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RangeQuery
     */
    metric?: { [key: string]: string; };
    /**
     * 
     * @type {Array<Values>}
     * @memberof RangeQuery
     */
    values?: Array<Values>;
}
/**
 * Service Account created in MAS-SSO for the Kafka Cluster for authentication
 * @export
 * @interface ServiceAccount
 */
export interface ServiceAccount {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccount
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    clientID?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    clientSecret?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccount
     */
    created_at?: string;
}
/**
 * 
 * @export
 * @interface ServiceAccountAllOf
 */
export interface ServiceAccountAllOf {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    clientID?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    clientSecret?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountAllOf
     */
    created_at?: string;
}
/**
 * 
 * @export
 * @interface ServiceAccountList
 */
export interface ServiceAccountList {
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountList
     */
    kind: string;
    /**
     * 
     * @type {Array<ServiceAccountListItem>}
     * @memberof ServiceAccountList
     */
    items: Array<ServiceAccountListItem>;
}
/**
 * 
 * @export
 * @interface ServiceAccountListAllOf
 */
export interface ServiceAccountListAllOf {
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountListAllOf
     */
    kind: string;
    /**
     * 
     * @type {Array<ServiceAccountListItem>}
     * @memberof ServiceAccountListAllOf
     */
    items: Array<ServiceAccountListItem>;
}
/**
 * 
 * @export
 * @interface ServiceAccountListItem
 */
export interface ServiceAccountListItem {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    href?: string;
    /**
     * client id of the service account
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    clientID?: string;
    /**
     * name of the service account
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    name?: string;
    /**
     * owner of the service account
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    owner?: string;
    /**
     * service account creation timestamp
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    created_at?: string;
    /**
     * description of the service account
     * @type {string}
     * @memberof ServiceAccountListItem
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ServiceAccountListItemAllOf
 */
export interface ServiceAccountListItemAllOf {
    /**
     * server generated unique id of the service account
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    id?: string;
    /**
     * client id of the service account
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    clientID?: string;
    /**
     * name of the service account
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    name?: string;
    /**
     * owner of the service account
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    owner?: string;
    /**
     * service account creation timestamp
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    created_at?: string;
    /**
     * description of the service account
     * @type {string}
     * @memberof ServiceAccountListItemAllOf
     */
    description?: string;
}
/**
 * Schema for the request to create a service account
 * @export
 * @interface ServiceAccountRequest
 */
export interface ServiceAccountRequest {
    /**
     * The name of the service account
     * @type {string}
     * @memberof ServiceAccountRequest
     */
    name: string;
    /**
     * A description for the service account
     * @type {string}
     * @memberof ServiceAccountRequest
     */
    description?: string;
}
/**
 * Schema for the service status response body
 * @export
 * @interface ServiceStatus
 */
export interface ServiceStatus {
    /**
     * 
     * @type {ServiceStatusKafkas}
     * @memberof ServiceStatus
     */
    kafkas?: ServiceStatusKafkas;
}
/**
 * The kafka resource api status
 * @export
 * @interface ServiceStatusKafkas
 */
export interface ServiceStatusKafkas {
    /**
     * Indicates whether we have reached kafka maximum capacity
     * @type {boolean}
     * @memberof ServiceStatusKafkas
     */
    max_capacity_reached: boolean;
}
/**
 * 
 * @export
 * @interface Values
 */
export interface Values {
    /**
     * 
     * @type {number}
     * @memberof Values
     */
    Timestamp?: number;
    /**
     * 
     * @type {number}
     * @memberof Values
     */
    Value: number;
}
/**
 * 
 * @export
 * @interface VersionMetadata
 */
export interface VersionMetadata {
    /**
     * 
     * @type {string}
     * @memberof VersionMetadata
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof VersionMetadata
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof VersionMetadata
     */
    href?: string;
    /**
     * 
     * @type {Array<ObjectReference>}
     * @memberof VersionMetadata
     */
    collections?: Array<ObjectReference>;
}
/**
 * 
 * @export
 * @interface VersionMetadataAllOf
 */
export interface VersionMetadataAllOf {
    /**
     * 
     * @type {Array<ObjectReference>}
     * @memberof VersionMetadataAllOf
     */
    collections?: Array<ObjectReference>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'async' is not null or undefined
            assertParamExists('createKafka', 'async', async)
            // verify required parameter 'kafkaRequestPayload' is not null or undefined
            assertParamExists('createKafka', 'kafkaRequestPayload', kafkaRequestPayload)
            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (async !== undefined) {
                localVarQueryParameter['async'] = async;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kafkaRequestPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a service account
         * @param {ServiceAccountRequest} serviceAccountRequest service account request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceAccountRequest' is not null or undefined
            assertParamExists('createServiceAccount', 'serviceAccountRequest', serviceAccountRequest)
            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteKafkaById', 'id', id)
            // verify required parameter 'async' is not null or undefined
            assertParamExists('deleteKafkaById', 'async', async)
            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (async !== undefined) {
                localVarQueryParameter['async'] = async;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteServiceAccount', 'id', id)
            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getKafkaById', 'id', id)
            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metrics with instant query by kafka id.
         * @param {string} id The id of record
         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMetricsByInstantQuery', 'id', id)
            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filters) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metrics with timeseries range query by kafka id.
         * @param {string} id The id of record
         * @param {number} duration The length of time in minutes over which to return the metrics.
         * @param {number} interval The interval in seconds between data points.
         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMetricsByRangeQuery', 'id', id)
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('getMetricsByRangeQuery', 'duration', duration)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('getMetricsByRangeQuery', 'interval', interval)
            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query_range`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (filters) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get service account by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getServiceAccountById', 'id', id)
            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the list of supported regions of the supported cloud provider.
         * @param {string} id The id of record
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listCloudProviderRegions', 'id', id)
            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers/{id}/regions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the list of supported cloud providers.
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List service accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reset credentials for the service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resetServiceAccountCreds', 'id', id)
            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}/reset-credentials`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceStatus: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/kafkas_mgmt/v1/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the version metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionMetadata: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/kafkas_mgmt/v1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKafka(async, kafkaRequestPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a service account
         * @param {ServiceAccountRequest} serviceAccountRequest service account request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceAccount(serviceAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKafkaById(id, async, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteServiceAccount(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKafkaById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get metrics with instant query by kafka id.
         * @param {string} id The id of record
         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByInstantQuery(id, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get metrics with timeseries range query by kafka id.
         * @param {string} id The id of record
         * @param {number} duration The length of time in minutes over which to return the metrics.
         * @param {number} interval The interval in seconds between data points.
         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByRangeQuery(id, duration, interval, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get service account by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAccountById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves the list of supported regions of the supported cloud provider.
         * @param {string} id The id of record
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviderRegions(id, page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves the list of supported cloud providers.
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviders(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listKafkas(page, size, orderBy, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List service accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceAccounts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary reset credentials for the service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetServiceAccountCreds(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceStatus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves the version metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async versionMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.versionMetadata(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new kafka Request
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {
            return localVarFp.createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a service account
         * @param {ServiceAccountRequest} serviceAccountRequest service account request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {
            return localVarFp.createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a kafka request by id
         * @param {string} id The id of record
         * @param {boolean} async Perform the action in an asynchronous manner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {
            return localVarFp.deleteKafkaById(id, async, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {
            return localVarFp.deleteServiceAccount(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a kafka request by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {
            return localVarFp.getKafkaById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metrics with instant query by kafka id.
         * @param {string} id The id of record
         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {
            return localVarFp.getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metrics with timeseries range query by kafka id.
         * @param {string} id The id of record
         * @param {number} duration The length of time in minutes over which to return the metrics.
         * @param {number} interval The interval in seconds between data points.
         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {
            return localVarFp.getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get service account by id
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {
            return localVarFp.getServiceAccountById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the list of supported regions of the supported cloud provider.
         * @param {string} id The id of record
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {
            return localVarFp.listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the list of supported cloud providers.
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {
            return localVarFp.listCloudProviders(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of Kafka requests
         * @param {string} [page] Page index
         * @param {string} [size] Number of items in each page
         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {
            return localVarFp.listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List service accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {
            return localVarFp.listServiceAccounts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary reset credentials for the service account
         * @param {string} id The id of record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {
            return localVarFp.resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceStatus(options?: any): AxiosPromise<ServiceStatus> {
            return localVarFp.serviceStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the version metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionMetadata(options?: any): AxiosPromise<VersionMetadata> {
            return localVarFp.versionMetadata(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a new kafka Request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;

    /**
     * 
     * @summary Create a service account
     * @param {ServiceAccountRequest} serviceAccountRequest service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;

    /**
     * 
     * @summary Delete a kafka request by id
     * @param {string} id The id of record
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;

    /**
     * 
     * @summary Delete service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;

    /**
     * 
     * @summary Get a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;

    /**
     * 
     * @summary Get metrics with instant query by kafka id.
     * @param {string} id The id of record
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;

    /**
     * 
     * @summary Get metrics with timeseries range query by kafka id.
     * @param {string} id The id of record
     * @param {number} duration The length of time in minutes over which to return the metrics.
     * @param {number} interval The interval in seconds between data points.
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;

    /**
     * 
     * @summary get service account by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;

    /**
     * 
     * @summary Retrieves the list of supported regions of the supported cloud provider.
     * @param {string} id The id of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;

    /**
     * 
     * @summary Retrieves the list of supported cloud providers.
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;

    /**
     * 
     * @summary Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;

    /**
     * 
     * @summary List service accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;

    /**
     * 
     * @summary reset credentials for the service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;

    /**
     * 
     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    serviceStatus(options?: any): AxiosPromise<ServiceStatus>;

    /**
     * 
     * @summary Retrieves the version metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    versionMetadata(options?: any): AxiosPromise<VersionMetadata>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Create a new kafka Request
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {
        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a service account
     * @param {ServiceAccountRequest} serviceAccountRequest service account request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {
        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a kafka request by id
     * @param {string} id The id of record
     * @param {boolean} async Perform the action in an asynchronous manner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteKafkaById(id: string, async: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteServiceAccount(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a kafka request by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getKafkaById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metrics with instant query by kafka id.
     * @param {string} id The id of record
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metrics with timeseries range query by kafka id.
     * @param {string} id The id of record
     * @param {number} duration The length of time in minutes over which to return the metrics.
     * @param {number} interval The interval in seconds between data points.
     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get service account by id
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getServiceAccountById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves the list of supported regions of the supported cloud provider.
     * @param {string} id The id of record
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {
        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves the list of supported cloud providers.
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listCloudProviders(page?: string, size?: string, options?: any) {
        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of Kafka requests
     * @param {string} [page] Page index
     * @param {string} [size] Number of items in each page
     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then the results will be ordered by name.
     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {
        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List service accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceAccounts(options?: any) {
        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary reset credentials for the service account
     * @param {string} id The id of record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resetServiceAccountCreds(id: string, options?: any) {
        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public serviceStatus(options?: any) {
        return DefaultApiFp(this.configuration).serviceStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves the version metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public versionMetadata(options?: any) {
        return DefaultApiFp(this.configuration).versionMetadata(options).then((request) => request(this.axios, this.basePath));
    }
}


