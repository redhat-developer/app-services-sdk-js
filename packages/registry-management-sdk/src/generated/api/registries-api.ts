/* tslint:disable */
/* eslint-disable */
/**
 * Service Registry Service - Fleet Manager - v0
 * Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorInfo1 } from '../model';
// @ts-ignore
import { Registry } from '../model';
// @ts-ignore
import { RegistryCreate } from '../model';
/**
 * RegistriesApi - axios parameter creator
 * @export
 */
export const RegistriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Registry.
         * @param {RegistryCreate} registryCreate A new &#x60;Registry&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistry: async (registryCreate: RegistryCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryCreate' is not null or undefined
            assertParamExists('createRegistry', 'registryCreate', registryCreate)
            const localVarPath = `/api/serviceregistry_mgmt/v1/registries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `Registry`.
         * @summary Delete a Registry
         * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistry: async (registryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryId' is not null or undefined
            assertParamExists('deleteRegistry', 'registryId', registryId)
            const localVarPath = `/api/serviceregistry_mgmt/v1/registries/{registryId}`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of all registries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistries: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/serviceregistry_mgmt/v1/registries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `Registry`.
         * @summary Get a Registry
         * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistry: async (registryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registryId' is not null or undefined
            assertParamExists('getRegistry', 'registryId', registryId)
            const localVarPath = `/api/serviceregistry_mgmt/v1/registries/{registryId}`
                .replace(`{${"registryId"}}`, encodeURIComponent(String(registryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistriesApi - functional programming interface
 * @export
 */
export const RegistriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Registry.
         * @param {RegistryCreate} registryCreate A new &#x60;Registry&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistry(registryCreate: RegistryCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistry(registryCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an existing `Registry`.
         * @summary Delete a Registry
         * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRegistry(registryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistry(registryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the list of all registries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistries(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Registry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the details of a single instance of a `Registry`.
         * @summary Get a Registry
         * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistry(registryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistry(registryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistriesApi - factory interface
 * @export
 */
export const RegistriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Registry.
         * @param {RegistryCreate} registryCreate A new &#x60;Registry&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistry(registryCreate: RegistryCreate, options?: any): AxiosPromise<Registry> {
            return localVarFp.createRegistry(registryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing `Registry`.
         * @summary Delete a Registry
         * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistry(registryId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRegistry(registryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the list of all registries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistries(options?: any): AxiosPromise<Array<Registry>> {
            return localVarFp.getRegistries(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `Registry`.
         * @summary Get a Registry
         * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistry(registryId: number, options?: any): AxiosPromise<Registry> {
            return localVarFp.getRegistry(registryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistriesApi - interface
 * @export
 * @interface RegistriesApi
 */
export interface RegistriesApiInterface {
    /**
     * 
     * @summary Create a Registry.
     * @param {RegistryCreate} registryCreate A new &#x60;Registry&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApiInterface
     */
    createRegistry(registryCreate: RegistryCreate, options?: any): AxiosPromise<Registry>;

    /**
     * Deletes an existing `Registry`.
     * @summary Delete a Registry
     * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApiInterface
     */
    deleteRegistry(registryId: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Get the list of all registries.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApiInterface
     */
    getRegistries(options?: any): AxiosPromise<Array<Registry>>;

    /**
     * Gets the details of a single instance of a `Registry`.
     * @summary Get a Registry
     * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApiInterface
     */
    getRegistry(registryId: number, options?: any): AxiosPromise<Registry>;

}

/**
 * RegistriesApi - object-oriented interface
 * @export
 * @class RegistriesApi
 * @extends {BaseAPI}
 */
export class RegistriesApi extends BaseAPI implements RegistriesApiInterface {
    /**
     * 
     * @summary Create a Registry.
     * @param {RegistryCreate} registryCreate A new &#x60;Registry&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public createRegistry(registryCreate: RegistryCreate, options?: any) {
        return RegistriesApiFp(this.configuration).createRegistry(registryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing `Registry`.
     * @summary Delete a Registry
     * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public deleteRegistry(registryId: number, options?: any) {
        return RegistriesApiFp(this.configuration).deleteRegistry(registryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the list of all registries.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public getRegistries(options?: any) {
        return RegistriesApiFp(this.configuration).getRegistries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `Registry`.
     * @summary Get a Registry
     * @param {number} registryId A unique identifier for a &#x60;Registry&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistriesApi
     */
    public getRegistry(registryId: number, options?: any) {
        return RegistriesApiFp(this.configuration).getRegistry(registryId, options).then((request) => request(this.axios, this.basePath));
    }
}
